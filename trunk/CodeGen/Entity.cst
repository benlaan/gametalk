<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Description="Creates a simplistic entity object." %>
<%-- The XmlProperty directive must be registered so that the XML object model is generated. --%>
<%@ Property Name="EntityName" Type="System.String" Optional="True" Category="Context" Description="If this template is being called directly, then specify the element name to target." %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
using System;
using System.IO;
using System.Diagnostics;

using Laan.GameLibrary;
using Laan.GameLibrary.Data;
using Laan.GameLibrary.Entity;

namespace <%= EntityElement.Namespace %>
{

    namespace Server
    {
        public partial class <%= EntityElement.Name %>List { }

        public partial class <%= EntityElement.Name %>
        {

            // --------------- Protected --------------------------------------------

            protected override byte[] ProcessCommand(BinaryStreamReader reader)
            {
                return null;
            }
            
            // --------------- Public -----------------------------------------------

            public override void Initialise()
            {
                base.Initialise();
            }
        }
    }

    namespace Client
    {
        public partial class <%= EntityElement.Name %>List { }

        public partial class <%= EntityElement.Name %>
        {
            // --------------- Public -----------------------------------------------

            public override void Initialise()
            {
                base.Initialise();
            }
		}
    }
}

<script runat="template">

    private Entity _entityElement = null;

    [Browsable(false)]
    public Entity EntityElement
    {
        get {return _entityElement;}
        set {_entityElement = value;}
    }

    int MaxWidthType()
    {
        int max = 0;
        foreach (Property property in EntityElement.Properties)
            max = max > property.Type.Length ? max : property.Type.Length;
        return max;
    }

    int MaxWidthName()
    {
        int max = 0;
        foreach (Property property in EntityElement.Properties)
            max = max > property.Name.Length ? max : property.Name.Length;
        return max;
    }

    string FormattedWidth(string text, int width)
    {
        string format = String.Format("{{0, -{0}}}", width);
        return String.Format(format, text);
    }

    string GetConstructor(bool getAll)
    {
        string constructor = "";
        string baseConstructor = "";

        foreach (Property property in EntityElement.Properties)
        {
            if(!property.List)
            {
                if(property.InConstructor)
                {
                    Trace.WriteLine(String.Format("{0} : {1}", property.Name, property.Inherited));

                    constructor += String.Format("{0} {1}, ", property.Type, StringUtility.ToCamelCase(property.Name));

                    //if((property.Inherited) || getAll)
                    baseConstructor += String.Format("{0}, ", StringUtility.ToCamelCase(property.Name));
                }
            }
        }
        Char[] trim = new Char[] {' ', ','};
        return String.Format("({0}) : base({1})", constructor.TrimEnd(trim), baseConstructor.TrimEnd(trim));
    }
    
    string GetBaseClass(string origin)
    {
        string result;
        if(EntityElement.BaseClass != null)
            result = String.Format("{0}.{1}.{2}", EntityElement.BaseClass, origin, EntityElement.BaseClass);
        else
            result = "BaseEntity";
        return result;
    }

    string IsNew()
    {
        return EntityElement.BaseClass != null ? "new" : "";
    }

</script>
