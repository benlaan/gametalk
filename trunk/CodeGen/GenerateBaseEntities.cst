<%--
Name: EntityMaster.cst
Author: Ben Laan
Description: Generates the plumbing class and the user class in separate units for each Entity in the EntityList
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="True" Description="Generates simplistic entity objects from an entity map file." %>
<%@ XmlProperty Name="EntityMap" Schema="RiskMap.xsd" Default="" Category="Context" Description="The entity map XML file." %>
<%@ Property Name="RebuildAll" Type="Boolean" Default="False" Optional="False" Category="" Description="" Editor="" EditorBase="" Serializer="" %>
<%@ Register Name="BaseEntityTemplate" Template="BaseEntity.cst" %>
<%@ Register Name="EntityTemplate" Template="Entity.cst" %>
<%@ Assembly Name="System.Design" %>
<%@ Import NameSpace="System.IO" %>

<script runat="template">

private string _outputDirectory = String.Empty;

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional]
[Category("Output")]
[Description("The directory to output the results to.")]
public string OutputDirectory
{
    get
    {
        // default to the directory that the template is located in
        if (_outputDirectory.Length == 0)
            return this.CodeTemplateInfo.DirectoryName + "output\\";

        return _outputDirectory;
    }
    set
    {
        if (!value.EndsWith("\\")) value += "\\";
        _outputDirectory = value;
    }
}

public override void Render(TextWriter writer)
{
    if (!Directory.Exists(this.OutputDirectory)) 
		Directory.CreateDirectory(this.OutputDirectory);

    foreach (Entity entity in EntityMap.Entities)
    {
        string fileName = String.Format("{0}{1}.g.cs", this.OutputDirectory, entity.Name);
        if (System.IO.File.Exists(fileName))
        {
            Trace.WriteLine(String.Format("Deleting file {0}...", fileName));
            System.IO.File.Delete(fileName);
        }
		
        BaseEntityTemplate baseEntityTemplate = new BaseEntityTemplate();
        baseEntityTemplate.EntityElement = entity;
        baseEntityTemplate.RenderToFile(fileName, true);

        Trace.WriteLine(String.Format("Generating file {0}...", fileName));

        fileName = String.Format("{0}{1}.cs", this.OutputDirectory, entity.Name);
        
        // Generate the User file only if it doesn't exist
        if (RebuildAll || (!System.IO.File.Exists(fileName)))
        {
            EntityTemplate entityTemplate = new EntityTemplate();
            entityTemplate.EntityElement = entity;
            entityTemplate.RenderToFile(fileName, true);
            Trace.WriteLine(String.Format("Generating file {0}...", fileName));
        }
    }
}
</script>
