<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="False" Description="Creates a simplistic entity object." %>
<%-- The XmlProperty directive must be registered so that the XML object model is generated. --%>
<%@ XmlProperty Name="EntityMap" Schema="RiskMap.xsd" Optional="True" Category="Context" %>
<%@ Property Name="EntityName" Type="System.String" Optional="True" Category="Context" Description="If this template is being called directly, then specify the element name to target." %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
using System;
using System.IO;
using System.Diagnostics;

using Laan.GameLibrary.Data;
using Laan.GameLibrary.Entity;

namespace <%= EntityElement.Namespace %>
{
    class Fields
    {
        <%
            Response.IndentLevel = 2;
            int width = MaxWidthName();
            int index = 1;
            foreach (Property property in EntityElement.Properties)
            {
                if(!property.Inherited)
                {
                    Response.WriteLine(
                        String.Format("internal const int {0} = {1};",
                            FormattedWidth(property.Name, width),
                            index
                        )
                    );
                }
                index++;
            }
            Response.IndentLevel = 0;
        %>
    }
    
    namespace Server
    {
    <%
        width = MaxWidthType();
        
        foreach (Requirement req in EntityElement.Requirements)
        {
            Response.WriteLine(
                String.Format("        using {0}s = {1}.Server;", GetTermEntity(req.Namespace), req.Namespace)
            );
        }
    %>

        public class <%= EntityElement.Name %>List : ServerEntityList
        {
            public new <%= DeriveClassName(EntityElement, "Server") %> this[int index]
            {
                get {
                    return (<%= DeriveClassName(EntityElement, "Server") %>)base[index];
                }
            }
        }

        public abstract class Base<%= EntityElement.Name %> : <%= GetBaseClass("Server") %>
        {
            // --------------- Private -------------------------------------------------

       <%
            Response.IndentLevel = 3;
            width = MaxWidthType();
            index = 1;
            foreach (Property property in EntityElement.Properties)
                if(!property.Inherited)
                {
                    if(!IsPrimitiveType(property.Type))
                        Response.WriteLine(
                            String.Format("internal {0} {1};",
                                FormattedWidth("Int32", width),
                                GetModifyValue(property)
                            )
                        );                    
                    index++;
                }

            Response.WriteLine("");

            foreach (Property property in EntityElement.Properties)
                if(!property.Inherited)
                {
                    Response.WriteLine(
                        String.Format("internal {0} _{1}{2};",
                            FormattedWidth(GetDeclaredType(property), width),
                            StringUtility.ToCamelCase(property.Name),
                            property.Type == "String" ? " = \"\"" : ""
                        )
                    );
                    index++;
                }
            Response.IndentLevel = 0;
        %>

            public override void Serialise(BinaryStreamWriter writer)
            {
                base.Serialise(writer);
                <%
                    Response.IndentLevel = 4;
                    foreach (Property property in EntityElement.Properties)
                    {
                        string type = property.ShortType != null ? property.ShortType : property.Type;
                        if(!property.Inherited)
                            if(IsPrimitiveType(property.Type))
                                Response.WriteLine(String.Format("writer.Write{0}(this.{1});", type, property.Name));
                    }
                    
                    Response.IndentLevel = 0;
                %>
            }

            // --------------- Public -----------------------------------------------

            public Base<%= EntityElement.Name %><%= GetConstructor() %>
            {
                <%
                    Response.IndentLevel = 4;
                    foreach (Property property in EntityElement.Properties)
                    {
                        string type = property.ShortType != null ? property.ShortType : property.Type;
                        if(!property.Inherited)
                            if(!IsPrimitiveType(property.Type))
                                Response.WriteLine(
                                    String.Format("{0} = new {1}.Server.{2}();", 
                                        property.Name, property.Type.Replace("List", ""), property.Type));

                    }
                    
                    Response.IndentLevel = 0;
                %>
            }

            public static implicit operator GameLibrary.Entity.Server(Base<%= EntityElement.Name %> <%= StringUtility.ToCamelCase(EntityElement.Name) %>)
            {
                // allows the class to be cast to an Entity.Server class
                return <%= StringUtility.ToCamelCase(EntityElement.Name) %>.CommServer;
            }
            
<%
            foreach (Property property in EntityElement.Properties)
                if(!property.Inherited)
                {
%>
            public <%=GetDeclaredType(property)%> <%= property.Name %>
            {
                get { return _<%= StringUtility.ToCamelCase(property.Name)%>; }
                set {
                    _<%= StringUtility.ToCamelCase(property.Name)%> = value;
                    <%=GetModifyUpdate(property) %>
                    CommServer.Modify(this.ID, Fields.<%=property.Name%>, <%=GetModifyValue(property)%>);
                }
            }

<%              } %>
        }
    }

    namespace Client
    {
    <%
        width = MaxWidthType();
        
        foreach (Requirement req in EntityElement.Requirements)
        {
            Response.WriteLine(String.Format("        using {0}s = {1}.Client;", GetTermEntity(req.Namespace), req.Namespace));
        }
    %>
    
        public class <%= EntityElement.Name %>List: ClientEntityList
        {
            public new <%= DeriveClassName(EntityElement, "Client") %> this[int index]
            {
                get {
                    return (<%= DeriveClassName(EntityElement, "Client") %>)base[index];
                }
            }
        }

        public abstract class Base<%= EntityElement.Name %> : <%= GetBaseClass("Client") %>
        {

            // ------------ Private ---------------------------------------------------------

        <%
            Response.IndentLevel = 3;
            width = MaxWidthType();
            index = 1;
            foreach (Property property in EntityElement.Properties)
                if(!property.Inherited)
                {
                    Response.WriteLine(
                        String.Format("internal {0} _{1}{2};",
                            FormattedWidth(GetDeclaredType(property), width),
                            StringUtility.ToCamelCase(property.Name),
                            property.Type == "String" ? " = \"\"" : ""
                        )
                    );
                    index++;
                }

            Response.IndentLevel = 0;
        %>

            public override void Deserialise(BinaryStreamReader reader)
            {
                base.Deserialise(reader);
                <%
                    Response.IndentLevel = 4;
                    int max = MaxWidthName();
                    foreach (Property property in EntityElement.Properties)

                        if(!property.Inherited)
                            if(IsPrimitiveType(property.Type))
                            Response.WriteLine(
                                    String.Format("_{0} = reader.Read{1}();",
                                        FormattedWidth(StringUtility.ToCamelCase(property.Name), max),
                                        property.ShortType != null ? property.ShortType : property.Type
                                    ));
                         //   else
                         //       Response.WriteLine(String.Format("this.{0}.Deserialise(reader);", property.Name));
                   
                     Response.IndentLevel = 0;
                %>
            }

            // ------------ Public ----------------------------------------------------------

            public Base<%= EntityElement.Name %><%= GetConstructor() %>
            {
            }

            // when a change is caught (by the client), ensure the correct field is updated
            protected override <%=IsNew()%>void DoModify(byte field, BinaryStreamReader reader)
            {

                base.DoModify(field, reader);
                
                // move this to the call site of the delegate that calls this (OnUpdate) event
                CommClient.UpdateRecency(field);

                <%
                
                    bool hasNonInheritedProps = NonInheritedProps();
                
                    Response.IndentLevel = 4;
                    if (hasNonInheritedProps)
                    {
                        Response.WriteLine(@"// update the appropriate field");
                        Response.WriteLine(@"switch (field)");
                        Response.WriteLine(@"{");
                    }
                    Response.IndentLevel = 5;
                    foreach (Property property in EntityElement.Properties)
                        if(!property.Inherited)
                        {
                            Response.WriteLine(String.Format("case Fields.{0}:", property.Name));
    
                            if(IsPrimitiveType(property.Type))
                            {
                                Response.WriteLine(String.Format("    _{0} = reader.Read{1}();",
                                    StringUtility.ToCamelCase(property.Name),
                                    property.ShortType != null ? property.ShortType : property.Type));
                            }
                            else
                            {
                                Response.WriteLine(
                                    String.Format(
                                        "    _{0} = ({1})(ClientDataStore.Instance.Find(reader.ReadInt32()));",
                                        StringUtility.ToCamelCase(property.Name), GetDeclaredType(property)
                                    )
                                );
                            }
            
                            Response.WriteLine("    break;");
                        }
                        Response.IndentLevel = 4;
                        
//                    default:
//                        throw new Exception("Illegal field value");
                    if (hasNonInheritedProps)
                    {
                        Response.WriteLine(@"}");
                    }
                    Response.IndentLevel = 0;
                %>
            }

        <%
            foreach (Property property in EntityElement.Properties)
                if(!property.Inherited)
                {
        %>        
            public <%=GetDeclaredType(property)%> <%=property.Name %>
            {
                get { return _<%= StringUtility.ToCamelCase(property.Name)%>; }
            }

        <%      } %>
        }
    }
}

<script runat="template">

    private Entity _entityElement = null;

    [Browsable(false)]
    public Entity EntityElement
    {
        get {return _entityElement;}
        set {_entityElement = value;}
    }

    int MaxWidthType()
    {
        int max = 0;
        foreach (Property property in EntityElement.Properties)
            max = max > GetDeclaredType(property).Length ? max : GetDeclaredType(property).Length;
        return max;
    }

    int MaxWidthName()
    {
        int max = 0;
        foreach (Property property in EntityElement.Properties)
            max = max > property.Name.Length ? max : property.Name.Length;
        return max;
    }

    string FormattedWidth(string text, int width)
    {
        string format = String.Format("{{0, -{0}}}", width);
        return String.Format(format, text);
    }

    string GetConstructor()
    {
        string constructor = "";
        string baseConstructor = "";
        
        foreach (Property property in EntityElement.Properties)
        {
            if(!property.List)
            {
                if(property.InConstructor)
                {
                    constructor += String.Format("{0} {1}, ", property.Type, StringUtility.ToCamelCase(property.Name));

                    baseConstructor += String.Format("{0}, ", StringUtility.ToCamelCase(property.Name));
                }
            }
        }
        Char[] trim = new Char[] {' ', ','};
        return String.Format("({0}) : base({1})", constructor.TrimEnd(trim), baseConstructor.TrimEnd(trim));
    }

    string GetBase(string name, string origin)
    {
        return String.Format("{0}.{1}.{0}", name, origin);
    }

    string GetBaseClass(string origin)
    {
        string result;
        if(EntityElement.BaseClass != "")
            result = String.Format("{0}.{1}.{2}", EntityElement.BaseClass, origin, EntityElement.BaseClass);
        else
            result = "BaseEntity" + origin;
        return result;
    }
    
    string DeriveClassName(Entity entity, string section)
    {
        return String.Format("{0}.{1}", section, entity.Name);
    }

    string IsNew()
    {
        return ""; //EntityElement.BaseClass != "" ? "new " : "";
    }
    
    string GetInterfaceType(string propType)
    {
        if(!IsPrimitiveType(propType))
            return "I" + propType;
        else
            return propType; 
    }
    
    string GetTermEntity(string nameSpace)
    {
        string[] parts = Regex.Split(nameSpace, @"\.");
        return parts[parts.Length - 1];
    }
    
    string GetModifyValue(Property prop)
    {
        if(IsPrimitiveType(prop.Type))
            return "value";
        else
            return String.Format("_{0}ID", StringUtility.ToCamelCase(prop.Name)); 
    }

    string GetModifyUpdate(Property prop)
    {
        if(!IsPrimitiveType(prop.Type)) 
            return GetModifyValue(prop) + " = value.ID;";
        else
            return "";
    }
    
    string GetDeclaredType(Property prop)
    {
        if(IsPrimitiveType(prop.Type))
            return prop.Type;
        else
        if(!prop.List)
            return String.Format("{0}s.{0}", prop.Type);
        else
            return String.Format("{0}s.{1}", prop.Type.Substring(0, prop.Type.Length - 4), prop.Type); 
    }
    
    bool NonInheritedProps()
    {
        int count = 0;
        foreach (Property property in EntityElement.Properties)
            if(!property.Inherited)
                count++;
                
        return count > 0;
    }
    
    bool IsPrimitiveType(string typeName)
    {
        switch(typeName)
        {
            case "Int32":
            case "String":
            case "DateTime":
            case "Boolean":
            case "System.Drawing.Color":
                return true;
            default:
                return false;
        }
    }

</script>